document.addEventListener('DOMContentLoaded', () => {
    const els = {
        radios: Array.from(document.querySelectorAll('.addr-radio')),
        coupon: byId('coupon'),
        btnApply: byId('btnApply'),
        msg: byId('couponMsg'),
        items: byId('items'),
        pSub: byId('p-sub'),
        pDiscount: byId('p-discount'),
        pShip: byId('p-ship'),
        pTotal: byId('p-total'),
        btnPlace: byId('btnPlace'),
        dockTotal: byId('dockTotal'),
        dockPayChip: byId('dockPayChip'),
        couponList: byId('coupon-list'),
        navPrev: document.querySelector('.voucher-strip .prev'),
        navNext: document.querySelector('.voucher-strip .next'),

        // VietQR / Proof
        vietqrBox: byId('vietqrBox'),
        pfForm: byId('proofForm'),
        pfFile: byId('pfFile'),
        pfPreview: byId('pfPreview'),
        pfPreviewImg: byId('pfPreviewImg'),
        pfPreviewName: byId('pfPreviewName'),
        pfPreviewSize: byId('pfPreviewSize'),
        pfSend: byId('pfSend'),
        pfStatusText: byId('pfStatusText')
    };

    function byId(id) {
        return document.getElementById(id);
    }

    function fmtVnd(n) {
        return Number(n || 0).toLocaleString('vi-VN') + ' Ä‘';
    }

    function escapeHtml(s) {
        return (s || '').replace(/[&<>"'`=\/]/g, c => ({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x39;',
            '/': '&#x2F;',
            '`': '&#x60;',
            '=': '&#x3D;'
        }[c]));
    }

    function disable(b) {
        [els.btnPlace, els.btnApply].forEach(x => x && (x.disabled = b));
    }

    function cryptoRandom() {
        return (crypto && crypto.randomUUID) ? crypto.randomUUID() : 'idem-' + Math.random().toString(36).slice(2) + Date.now();
    }

    function getAddressId() {
        const r = document.querySelector('input.addr-radio:checked');
        return r ? Number(r.value?.trim()) : null;
    }

    function getPaymentMethod() {
        const r = document.querySelector('input[name="pay"]:checked');
        return r ? r.value.toUpperCase() : 'COD';
    }

    function getSelectedPayInfo() {
        const r = document.querySelector('input[name="pay"]:checked');
        if (!r) return {label: 'Thanh toÃ¡n khi nháº­n hÃ ng', logo: '/images/cod.png'};
        const item = r.closest('.payitem');
        const label = item?.querySelector('.title')?.textContent?.trim() || r.value;
        const img = item?.querySelector('.pay-logo');
        const logo = img ? img.getAttribute('src') : null;
        return {label, logo};
    }

    function updateDockPayChip() {
        const info = getSelectedPayInfo();
        if (!els.dockPayChip) return;
        els.dockPayChip.innerHTML = `${info.logo ? `<img src="${info.logo}" alt="">` : ''}<b>${escapeHtml(info.label)}</b>`;
    }

    async function pricing() {
        const token = document.querySelector('meta[name="_csrf"]')?.content;
        const header = document.querySelector('meta[name="_csrf_header"]')?.content || 'X-CSRF-TOKEN';
        const csrfHeaders = token ? {[header]: token} : {};
        const req = {addressId: getAddressId(), couponCode: (els.coupon?.value || '').trim() || null};
        try {
            disable(true);
            const res = await fetch('/api/checkout/pricing', {
                method: 'POST',
                headers: {'Content-Type': 'application/json', ...csrfHeaders},
                body: JSON.stringify(req),
            });
            if (!res.ok) {
                if (res.status === 401) location.reload();
                throw new Error('pricing failed ' + res.status);
            }
            const data = await res.json();
            renderPricing(data, !!req.couponCode);
        } catch (e) {
            console.error(e);
            if (els.msg) els.msg.innerHTML = `<span class="err">KhÃ´ng thá»ƒ tÃ­nh toÃ¡n giÃ¡</span>`;
        } finally {
            disable(false);
        }
    }

    function renderPricing(p, hadCoupon) {
        els.pSub && (els.pSub.textContent = fmtVnd(p.subtotal || 0));
        els.pDiscount && (els.pDiscount.textContent = fmtVnd(p.discount || 0));
        els.pShip && (els.pShip.textContent = fmtVnd(p.shipping || 0));
        els.pTotal && (els.pTotal.textContent = fmtVnd(p.total || 0));
        els.dockTotal && (els.dockTotal.textContent = fmtVnd(p.total || 0));

        if (els.msg) {
            if (hadCoupon) {
                els.msg.innerHTML = (p.discount || 0) > 0 ? `<span class="ok">ÄÃ£ Ã¡p dá»¥ng mÃ£ giáº£m giÃ¡</span>` : `<span class="err">MÃ£ giáº£m giÃ¡ khÃ´ng há»£p lá»‡</span>`;
            } else els.msg.textContent = '';
        }
        const dockCoupon = document.getElementById('dockCoupon');
        if (dockCoupon) {
            const code = (els.coupon?.value || '').trim();
            dockCoupon.textContent = (p.discount > 0 && code) ? code : 'chÆ°a Ã¡p dá»¥ng';
        }
    }

    async function place() {
        const token = document.querySelector('meta[name="_csrf"]')?.content;
        const header = document.querySelector('meta[name="_csrf_header"]')?.content || 'X-CSRF-TOKEN';
        const csrfHeaders = token ? {[header]: token} : {};

        let payload;
        const aid = getAddressId();
        if (aid) {
            payload = {
                addressId: aid,
                couponCode: (els.coupon?.value || '').trim() || null,
                paymentMethod: getPaymentMethod(),
                note: byId('note')?.value || null
            };
        } else {
            payload = {
                addressId: null,
                couponCode: (els.coupon?.value || '').trim() || null,
                paymentMethod: getPaymentMethod(),
                note: byId('note')?.value || null,
                newAddressFullName: byId('fullname')?.value,
                newAddressPhone: byId('phone')?.value,
                newAddressEmail: byId('email')?.value,
                newAddressLine1: byId('address1')?.value,
                newAddressCity: byId('city')?.value,
            };
            if (!payload.newAddressFullName || !payload.newAddressPhone || !payload.newAddressLine1) {
                alert('Vui lÃ²ng Ä‘iá»n Ä‘áº§y Ä‘á»§ Há» tÃªn, Sá»‘ Ä‘iá»‡n thoáº¡i vÃ  Äá»‹a chá»‰.');
                return;
            }
        }

        try {
            disable(true);
            const res = await fetch('/api/checkout', {
                method: 'POST',
                headers: {'Content-Type': 'application/json', 'Idempotency-Key': cryptoRandom(), ...csrfHeaders},
                body: JSON.stringify(payload),
            });
            if (!res.ok) throw new Error('Äáº·t hÃ ng tháº¥t báº¡i ' + res.status);
            const placed = await res.json();
            if (placed.payUrl) location.href = placed.payUrl;
            else {
                const code = placed.code || placed.id;
                location.href = `/orders/${encodeURIComponent(code)}`;
            }
        } catch (e) {
            console.error(e);
            alert('Äáº·t hÃ ng tháº¥t báº¡i. Vui lÃ²ng thá»­ láº¡i!');
        } finally {
            disable(false);
        }
    }

    function oneCardWidth() {
        const t = els.couponList?.querySelector('.ticket');
        return t ? t.getBoundingClientRect().width + 10 : 200;
    }

    function updateVoucherNav() {
        if (!els.couponList) return;
        const el = els.couponList, max = el.scrollWidth - el.clientWidth, x = Math.round(el.scrollLeft);
        els.navPrev && (els.navPrev.disabled = x <= 1);
        els.navNext && (els.navNext.disabled = x >= max - 1);
    }

    function scrollVoucher(dir) {
        els.couponList?.scrollBy({left: dir * oneCardWidth(), behavior: 'smooth'});
    }

    // ===== VietQR: toggle + preview + upload =====
    function updatePayUI() {
        const pay = document.querySelector('input[name="pay"]:checked')?.value;
        els.vietqrBox && els.vietqrBox.classList.toggle('hidden', pay !== 'VIETQR');
    }

    document.querySelectorAll('input[name="pay"]').forEach(r => r.addEventListener('change', () => {
        updatePayUI();
        updateDockPayChip();
    }));
    updatePayUI();

    els.pfFile?.addEventListener('change', e => {
        const f = e.target.files?.[0];
        if (!f) {
            if (els.pfPreview) els.pfPreview.hidden = true;
            return;
        }
        if (els.pfPreview) els.pfPreview.hidden = false;
        if (els.pfPreviewImg) els.pfPreviewImg.src = URL.createObjectURL(f);
        if (els.pfPreviewName) els.pfPreviewName.textContent = f.name;
        if (els.pfPreviewSize) els.pfPreviewSize.textContent = (f.size / 1024).toFixed(1) + ' KB';
    });

    els.pfForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const token = document.querySelector('meta[name="_csrf"]')?.content;
        const header = document.querySelector('meta[name="_csrf_header"]')?.content || 'X-CSRF-TOKEN';
        const headers = token ? {[header]: token} : {};
        els.pfSend && (els.pfSend.disabled = true);
        try {
            const fd = new FormData(els.pfForm);
            const res = await fetch('/api/payment/proof', {method: 'POST', body: fd, headers});
            if (!res.ok) throw new Error(await res.text());
            if (els.pfStatusText) {
                els.pfStatusText.textContent = 'ÄÃ£ gá»­i â€” chá» admin duyá»‡t';
                els.pfStatusText.classList.remove('err');
                els.pfStatusText.classList.add('ok');
            }
        } catch (err) {
            alert('Gá»­i biÃªn lai tháº¥t báº¡i: ' + err.message);
            if (els.pfStatusText) {
                els.pfStatusText.textContent = 'Lá»—i gá»­i. Thá»­ láº¡i';
                els.pfStatusText.classList.add('err');
            }
        } finally {
            els.pfSend && (els.pfSend.disabled = false);
        }
    });

    // ===== bindings khÃ¡c =====
    els.btnApply?.addEventListener('click', pricing);
    els.btnPlace?.addEventListener('click', place);
    els.radios.forEach(r => r.addEventListener('change', pricing));
    els.navPrev?.addEventListener('click', () => scrollVoucher(-1));
    els.navNext?.addEventListener('click', () => scrollVoucher(1));
    els.couponList?.addEventListener('scroll', updateVoucherNav, {passive: true});
    els.couponList?.addEventListener('click', e => {
        const card = e.target.closest('.ticket');
        if (!card || !els.coupon) return;
        [...els.couponList.children].forEach(x => x.classList.remove('selected'));
        card.classList.add('selected');
        els.coupon.value = card.dataset.code || '';
        pricing();
    });

    updateDockPayChip();
    updateVoucherNav();
});

