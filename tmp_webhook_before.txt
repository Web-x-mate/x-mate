package xmate.com.controller.cart;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import xmate.com.entity.enums.OrderStatus;
import xmate.com.entity.enums.PaymentStatus;
import xmate.com.entity.sales.Order;
import xmate.com.repo.sales.OrderRepository;

import java.util.Locale;
import java.util.Map;

@RestController
@RequestMapping("/api/sepay")
@RequiredArgsConstructor
public class SepayWebhookController {

    private final OrderRepository orderRepository;
    private final SimpMessagingTemplate ws;

    // Webhook tá»« Sepay: cáº¥u hÃ¬nh URL: POST /api/sepay/webhook
    // LÆ°u Ã½: Cáº§n cáº¥u hÃ¬nh secret verification theo tÃ i liá»‡u Sepay (header chá»¯ kÃ½)
    @PostMapping("/webhook")
    @Transactional
    public ResponseEntity<Map<String,Object>> webhook(@RequestBody Map<String,Object> payload,
                                                      @RequestHeader Map<String,String> headers) {
        // TODO: verify signature here using headers (e.g., X-Signature) and shared secret

        // Thá»­ Ä‘á»c cÃ¡c tÃªn trÆ°á»ng phá»• biáº¿n tá»« Sepay (hoáº·c cÃ¡c cá»•ng tÆ°Æ¡ng tá»±)
        long amount = getLong(payload.get("amount"),
                getLong(payload.get("transfer_amount"), getLong(payload.get("money"), 0)));
        String content = str(payload.get("description"));
        if (!StringUtils.hasText(content)) content = str(payload.get("content"));
        if (!StringUtils.hasText(content)) content = str(payload.get("note"));
        if (!StringUtils.hasText(content)) content = str(payload.get("message"));

        if (!StringUtils.hasText(content)) {
            return ResponseEntity.badRequest().body(Map.of(
                    "ok", false,
                    "error", "Missing transfer content"
            ));
        }

        // TÃ¬m mÃ£ Ä‘Æ¡n trong ná»™i dung chuyá»ƒn khoáº£n (vÃ­ dá»¥ XM-<code> hoáº·c code)
        String foundCode = extractOrderCode(content);
        if (!StringUtils.hasText(foundCode)) {
            return ResponseEntity.ok(Map.of("ok", true, "matched", false));
        }

        Order order = orderRepository.findByCode(foundCode).orElse(null);
        if (order == null) {
            return ResponseEntity.ok(Map.of("ok", true, "matched", false, "reason", "order_not_found"));
        }

        // Äiá»u kiá»‡n tá»‘i thiá»ƒu: sá»‘ tiá»n >= total
        if (amount <= 0 || amount < order.getTotal()) {
            return ResponseEntity.ok(Map.of("ok", true, "matched", false, "reason", "amount_not_enough"));
        }

        if (order.getPaymentStatus() != PaymentStatus.PAID) {
            order.setPaymentStatus(PaymentStatus.PAID);
            if (order.getStatus() == OrderStatus.PENDING_PAYMENT) {
                order.setStatus(OrderStatus.PLACED);
            }
            orderRepository.save(order);
            // ThÃ´ng bÃ¡o qua WebSocket Ä‘á»ƒ client Ä‘ang má»Ÿ trang QR tá»± chuyá»ƒn trang
            try {
                ws.convertAndSend("/topic/order." + order.getCode(), Map.of(
                        "event", "paid",
                        "code", order.getCode()
                ));
            } catch (Exception ignored) {}
        }

        return ResponseEntity.ok(Map.of(
                "ok", true,
                "matched", true,
                "code", order.getCode(),
                "orderId", order.getId()
        ));
    }

    private static String str(Object o) {
        return o == null ? null : String.valueOf(o);
    }

    private static long getLong(Object... candidates) {
        for (Object c : candidates) {
            if (c == null) continue;
            if (c instanceof Number n) return n.longValue();
            try {
                return Long.parseLong(String.valueOf(c));
            } catch (Exception ignored) {}
        }
        return 0L;
    }

    // Heuristic: láº¥y tá»« khÃ³a cÃ³ dáº¡ng XM-XXXX hoáº·c khá»›p chÃ­nh mÃ£ Ä‘Æ¡n náº¿u ná»™i dung chá»©a
    private static String extractOrderCode(String content) {
        if (content == null) return null;
        String s = content.trim();
        // chuáº©n hÃ³a
        String normalized = s.replaceAll("\\s+", " ").toUpperCase(Locale.ROOT);

        // TÃ¬m máº«u "XM-<8 kÃ½ tá»±>" hoáº·c "XM-..." phá»• biáº¿n
        java.util.regex.Matcher m = java.util.regex.Pattern.compile("([A-Z]{2}-[A-Z0-9]{4,})").matcher(normalized);
        if (m.find()) return m.group(1);

        // fallback: náº¿u chá»©a "CODE:" + mÃ£
        m = java.util.regex.Pattern.compile("CODE[:\\s]+([A-Z0-9-]{4,})").matcher(normalized);
        if (m.find()) return m.group(1);

        return null;
    }
}

